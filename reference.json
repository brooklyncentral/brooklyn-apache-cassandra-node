{"entities": [{"name": "Apache Cassandra Node", "type": "org.apache.brooklyn.entity.nosql.cassandra.CassandraNode", "iconUrl": "classpath:///cassandra-logo.jpeg", "effectors": [{"returnType": "java.lang.String", "name": "executeScript", "parameters": [{"defaultValue": null, "type": "java.lang.String", "name": "commands", "description": "commands"}], "description": "executes the given script contents using cassandra-cli"}, {"returnType": "void", "name": "populateServiceNotUpDiagnostics", "parameters": [], "description": "Populates the attribute service.notUp.diagnostics, with any available health indicators"}, {"returnType": "void", "name": "restart", "parameters": [], "description": "Restart the process/service represented by an entity"}, {"returnType": "void", "name": "start", "parameters": [{"defaultValue": null, "type": "java.lang.Object", "name": "locations", "description": "The location or locations to start in, as a string, a location object, a list of strings, or a list of location objects"}], "description": "Start the process/service represented by an entity"}, {"returnType": "void", "name": "stop", "parameters": [], "description": "Stop the process/service represented by an entity"}], "sensors": [{"type": "java.lang.String", "name": "cassandra.cluster.name", "links": {}, "description": "Name of the Cassandra cluster"}, {"type": "java.lang.Integer", "name": "cassandra.gossip.port", "links": {}, "description": "Cassandra Gossip communications port"}, {"type": "java.lang.Integer", "name": "cassandra.liveNodeCount", "links": {}, "description": "Number of live nodes in cluster"}, {"type": "java.lang.Integer", "name": "cassandra.native.port", "links": {}, "description": "Cassandra Native Transport port"}, {"type": "java.lang.Integer", "name": "cassandra.peers", "links": {}, "description": "Number of peers in cluster"}, {"type": "java.lang.Integer", "name": "cassandra.read.active", "links": {}, "description": "Current active ReadStage tasks"}, {"type": "java.lang.Long", "name": "cassandra.read.completed", "links": {}, "description": "Total completed ReadStage tasks"}, {"type": "java.lang.Long", "name": "cassandra.read.pending", "links": {}, "description": "Current pending ReadStage tasks"}, {"type": "java.lang.Double", "name": "cassandra.reads.perSec.last", "links": {}, "description": "Reads/sec (last datapoint)"}, {"type": "java.lang.Double", "name": "cassandra.reads.perSec.windowed", "links": {}, "description": "Reads/sec (over time window)"}, {"type": "java.lang.String", "name": "cassandra.replication.datacenterName", "links": {}, "description": "Datacenter name (used for configuring replication, when a suitable snitch is used)"}, {"type": "java.lang.String", "name": "cassandra.replication.rackName", "links": {}, "description": "Rack name (used for configuring replication, when a suitable snitch is used)"}, {"type": "java.lang.Boolean", "name": "cassandra.service.jmx.up", "links": {}, "description": "Whether JMX is up for this service"}, {"type": "java.lang.Integer", "name": "cassandra.ssl-gossip.port", "links": {}, "description": "Cassandra Gossip SSL communications port"}, {"type": "java.lang.Long", "name": "cassandra.thrift.latency", "links": {}, "description": "Latency for thrift port connection (ms) or null if down"}, {"type": "java.lang.Double", "name": "cassandra.thrift.latency.windowed", "links": {}, "description": "Latency for thrift port (ms, averaged over time window)"}, {"type": "java.lang.Integer", "name": "cassandra.thrift.port", "links": {}, "description": "Cassandra Thrift RPC port"}, {"type": "java.util.Set", "name": "cassandra.tokens", "links": {}, "description": "Cassandra Tokens"}, {"type": "java.lang.Integer", "name": "cassandra.write.active", "links": {}, "description": "Current active MutationStage tasks"}, {"type": "java.lang.Long", "name": "cassandra.write.completed", "links": {}, "description": "Total completed MutationStage tasks"}, {"type": "java.lang.Long", "name": "cassandra.write.pending", "links": {}, "description": "Current pending MutationStage tasks"}, {"type": "java.lang.Double", "name": "cassandra.write.perSec.last", "links": {}, "description": "Writes/sec (last datapoint)"}, {"type": "java.lang.Double", "name": "cassandra.writes.perSec.windowed", "links": {}, "description": "Writes/sec (over time window)"}, {"type": "java.lang.String", "name": "datastore.url", "links": {}, "description": "Primary contact URL for a datastore (e.g. mysql://localhost:3306/)"}, {"type": "java.util.Map", "name": "download.addon.urls", "links": {}, "description": "URL patterns for downloading named add-ons (will substitute things like ${version} automatically)"}, {"type": "java.lang.String", "name": "download.url", "links": {}, "description": "URL pattern for downloading the installer (will substitute things like ${version} automatically)"}, {"type": "java.lang.String", "name": "expandedinstall.dir", "links": {}, "description": "Directory for installed artifacts (e.g. expanded dir after unpacking .tgz)"}, {"type": "java.lang.String", "name": "host.address", "links": {}, "description": "Host IP address"}, {"type": "java.lang.String", "name": "host.name", "links": {}, "description": "Host name"}, {"type": "java.lang.String", "name": "host.subnet.address", "links": {}, "description": "Host address as known internally in the subnet where it is running (if different to host.name)"}, {"type": "java.lang.String", "name": "host.subnet.hostname", "links": {}, "description": "Host name as known internally in the subnet where it is running (if different to host.name)"}, {"type": "java.lang.String", "name": "install.dir", "links": {}, "description": "Directory for this software to be installed in"}, {"type": "java.util.Map", "name": "java.metrics.gc.time", "links": {}, "description": "garbage collection time"}, {"type": "java.lang.Long", "name": "java.metrics.heap.committed", "links": {}, "description": "Commited heap size (bytes)"}, {"type": "java.lang.Long", "name": "java.metrics.heap.init", "links": {}, "description": "Initial heap size (bytes)"}, {"type": "java.lang.Long", "name": "java.metrics.heap.max", "links": {}, "description": "Max heap size (bytes)"}, {"type": "java.lang.Long", "name": "java.metrics.heap.used", "links": {}, "description": "Current heap size (bytes)"}, {"type": "java.lang.Long", "name": "java.metrics.nonheap.used", "links": {}, "description": "Current non-heap size (bytes)"}, {"type": "java.lang.Long", "name": "java.metrics.physicalmemory.free", "links": {}, "description": "The free memory available to the operating system"}, {"type": "java.lang.Long", "name": "java.metrics.physicalmemory.total", "links": {}, "description": "The physical memory available to the operating system"}, {"type": "java.lang.Double", "name": "java.metrics.processCpuTime.fraction.last", "links": {}, "description": "Fraction of CPU time used, reported by JVM (percentage, last datapoint)"}, {"type": "java.lang.Double", "name": "java.metrics.processCpuTime.fraction.windowed", "links": {}, "description": "Fraction of CPU time used, reported by JVM (percentage, over time window)"}, {"type": "java.lang.Double", "name": "java.metrics.processCpuTime.total", "links": {}, "description": "Process CPU time (total millis since start)"}, {"type": "java.lang.Integer", "name": "java.metrics.processors.available", "links": {}, "description": "number of processors available to the Java virtual machine"}, {"type": "java.lang.Long", "name": "java.metrics.starttime", "links": {}, "description": "Start time of Java process (UTC)"}, {"type": "java.lang.Double", "name": "java.metrics.systemload.average", "links": {}, "description": "average system load"}, {"type": "java.lang.Integer", "name": "java.metrics.threads.current", "links": {}, "description": "Current number of threads"}, {"type": "java.lang.Integer", "name": "java.metrics.threads.max", "links": {}, "description": "Peak number of threads"}, {"type": "java.lang.Long", "name": "java.metrics.uptime", "links": {}, "description": "Uptime of Java process (millis, elapsed since start)"}, {"type": "java.lang.String", "name": "jmx.agent.local.path", "links": {}, "description": "Path to JMX driver on the local machine"}, {"type": "java.lang.String", "name": "jmx.context", "links": {}, "description": "JMX context path"}, {"type": "java.lang.Integer", "name": "jmx.direct.port", "links": {}, "description": "JMX direct/private port (e.g. JMX RMI server port, or JMXMP port, but not RMI registry port)"}, {"type": "java.lang.Integer", "name": "jmx.direct.port.legacy.NOT_USED", "links": {}, "description": "Legacy definition JMX direct/private port (e.g. JMX RMI server port, or JMXMP port, but not RMI registry port)"}, {"type": "java.lang.String", "name": "jmx.password", "links": {}, "description": "JMX password"}, {"type": "java.lang.String", "name": "jmx.service.url", "links": {}, "description": "The URL for connecting to the MBean Server"}, {"type": "java.lang.String", "name": "jmx.user", "links": {}, "description": "JMX username"}, {"type": "java.lang.Integer", "name": "rmi.registry.port", "links": {}, "description": "RMI registry port, used for discovering JMX (private) port"}, {"type": "java.lang.String", "name": "run.dir", "links": {}, "description": "Directory for this software to be run from"}, {"type": "java.lang.Boolean", "name": "service.isUp", "links": {}, "description": "Whether the service is active and availability (confirmed and monitored)"}, {"type": "java.lang.Boolean", "name": "service.process.isRunning", "links": {}, "description": "Whether the process for the service is confirmed as running"}, {"type": "org.apache.brooklyn.core.entity.lifecycle.Lifecycle", "name": "service.state", "links": {}, "description": "Actual lifecycle state of the service"}, {"type": "org.apache.brooklyn.core.entity.lifecycle.Lifecycle$Transition", "name": "service.state.expected", "links": {}, "description": "Last controlled change to service state, indicating what the expected state should be"}, {"type": "java.lang.String", "name": "softwareprocess.pid.file", "links": {}, "description": "PID file"}, {"type": "org.apache.brooklyn.api.location.MachineProvisioningLocation", "name": "softwareservice.provisioningLocation", "links": {}, "description": "Location used to provision a machine where this is running"}], "defaultVersion": "1.2.16", "config": [{"defaultValue": "apache-cassandra-%s", "type": "java.lang.String", "name": "archive.nameFormat", "reconfigurable": false, "description": "The format for the directory created when the installation archive is extracted, if required. The version string will be passed in as the first argument, replacing the %s format specifier"}, {"type": "java.lang.String", "name": "cassandra.broadcastAddressSensor", "reconfigurable": false, "description": "sensor name from which to take the broadcast address; default (null) is a smart lookup"}, {"defaultValue": "BrooklynCluster", "type": "java.lang.String", "name": "cassandra.cluster.name", "reconfigurable": false, "description": "Name of the Cassandra cluster"}, {"type": "java.util.Set", "name": "cassandra.cluster.seeds.initial", "reconfigurable": false, "description": "List of cluster nodes to seed this node"}, {"defaultValue": "SimpleSnitch", "type": "java.lang.String", "name": "cassandra.cluster.snitchName", "reconfigurable": false, "description": "Type of the Cassandra snitch"}, {"type": "java.lang.String", "name": "cassandra.config.customSnitchUrl", "reconfigurable": false, "description": "URL for a jar file to be uploaded (e.g. \"classpath://org/apache/brooklyn/entity/nosql/cassandra/cassandra-multicloud-snitch.jar\"); defaults to null which means nothing to upload"}, {"defaultValue": "cassandra.yaml", "type": "java.lang.String", "name": "cassandra.config.fileName", "reconfigurable": false, "description": "Name for the copied config file"}, {"defaultValue": "cassandra-rackdc.properties", "type": "java.lang.String", "name": "cassandra.config.rackdc.fileName", "reconfigurable": false, "description": "Name for the copied rackdc config file (used for configuring replication, when a suitable snitch is used)"}, {"defaultValue": "classpath://org/apache/brooklyn/entity/nosql/cassandra/cassandra-rackdc.properties", "type": "java.lang.String", "name": "cassandra.config.rackdc.templateUrl", "reconfigurable": false, "description": "Template file (in freemarker format) for the cassandra-rackdc.properties config file"}, {"defaultValue": "classpath://org/apache/brooklyn/entity/nosql/cassandra/cassandra-${entity.majorMinorVersion}.yaml", "type": "java.lang.String", "name": "cassandra.config.templateUrl", "reconfigurable": false, "description": "A URL (in freemarker format) for a cassandra.yaml config file (in freemarker format)"}, {"defaultValue": "7000-65535", "type": "org.apache.brooklyn.api.location.PortRange", "name": "cassandra.gossip.port", "reconfigurable": false, "description": "Cassandra Gossip communications port"}, {"defaultValue": "http://www.mirrorservice.org/sites/ftp.apache.org/cassandra", "type": "java.lang.String", "name": "cassandra.install.mirror.url", "reconfigurable": false, "description": "URL of mirror"}, {"type": "java.lang.String", "name": "cassandra.install.tgzUrl", "reconfigurable": false, "description": "URL of TGZ download file"}, {"type": "java.lang.String", "name": "cassandra.listenAddressSensor", "reconfigurable": false, "description": "sensor name from which to take the listen address; default (null) is a smart lookup"}, {"defaultValue": "9042-65535", "type": "org.apache.brooklyn.api.location.PortRange", "name": "cassandra.native.port", "reconfigurable": false, "description": "Cassandra Native Transport port"}, {"defaultValue": 1, "type": "java.lang.Integer", "name": "cassandra.numTokensPerNode", "reconfigurable": false, "description": "Number of tokens per node; if using vnodes, should set this to a value like 256"}, {"type": "java.lang.String", "name": "cassandra.replication.datacenterName", "reconfigurable": false, "description": "Datacenter name (used for configuring replication, when a suitable snitch is used)"}, {"type": "java.lang.String", "name": "cassandra.replication.rackName", "reconfigurable": false, "description": "Rack name (used for configuring replication, when a suitable snitch is used)"}, {"type": "java.lang.String", "name": "cassandra.rpcAddressSensor", "reconfigurable": false, "description": "sensor name from which to take the RPC address; default (null) is 0.0.0.0"}, {"defaultValue": "7001-65535", "type": "org.apache.brooklyn.api.location.PortRange", "name": "cassandra.ssl-gossip.port", "reconfigurable": false, "description": "Cassandra Gossip SSL communications port"}, {"defaultValue": "9160-65535", "type": "org.apache.brooklyn.api.location.PortRange", "name": "cassandra.thrift.port", "reconfigurable": false, "description": "Cassandra Thrift RPC port"}, {"type": "java.util.Set", "name": "cassandra.tokens", "reconfigurable": false, "description": "Cassandra Tokens"}, {"name": "children.startable.mode", "defaultValue": "NONE", "reconfigurable": false, "possibleValues": [{"description": "NONE", "value": "NONE"}, {"description": "FOREGROUND", "value": "FOREGROUND"}, {"description": "FOREGROUND_LATE", "value": "FOREGROUND_LATE"}, {"description": "BACKGROUND", "value": "BACKGROUND"}, {"description": "BACKGROUND_LATE", "value": "BACKGROUND_LATE"}], "type": "java.lang.Enum", "description": "Controls behaviour when starting Startable children as part of this entity's lifecycle."}, {"type": "java.lang.String", "name": "commands", "reconfigurable": false, "description": "commands"}, {"type": "java.lang.Boolean", "name": "customize.latch", "reconfigurable": false, "description": "Latch for blocking customize until ready"}, {"defaultValue": "", "type": "java.lang.String", "name": "datastore.creation.script.contents", "reconfigurable": false, "description": "Contents of creation script to initialize the datastore"}, {"defaultValue": "", "type": "java.lang.String", "name": "datastore.creation.script.template.url", "reconfigurable": false, "description": "URL of creation script Freemarker template used to initialize the datastore (ignored if datastore.creation.script.contents or datastore.creation.script.url is specified)"}, {"defaultValue": "", "type": "java.lang.String", "name": "datastore.creation.script.url", "reconfigurable": false, "description": "URL of creation script to use to initialize the datastore (ignored if creationScriptContents is specified)"}, {"defaultValue": false, "type": "java.lang.Boolean", "name": "dontRequireTtyForSudo", "reconfigurable": false, "description": "Whether to explicitly set /etc/sudoers, so don't need tty (will leave unchanged if 'false'); some machines require a tty for sudo; brooklyn by default does not use a tty (so that it can get separate error+stdout streams); you can enable a tty as an option to every ssh command, or you can do it once and modify the machine so that a tty is not subsequently required."}, {"type": "java.util.Map", "name": "download.addon.urls", "reconfigurable": false, "description": "URL patterns for downloading named add-ons (will substitute things like ${version} automatically)"}, {"defaultValue": "${driver.mirrorUrl}/${version}/apache-cassandra-${version}-bin.tar.gz", "type": "java.lang.String", "name": "download.url", "reconfigurable": false, "description": "URL pattern for downloading the installer (will substitute things like ${version} automatically)"}, {"type": "java.lang.Boolean", "name": "entity.running", "reconfigurable": false, "description": "Skip the startup process entirely, if service already running"}, {"type": "java.lang.Boolean", "name": "entity.started", "reconfigurable": false, "description": "Skip the startup process entirely, for running services"}, {"type": "java.lang.String", "name": "expandedinstall.dir", "reconfigurable": false, "description": "Directory for installed artifacts (e.g. expanded dir after unpacking .tgz)"}, {"type": "java.util.Map", "name": "files.install", "reconfigurable": false, "description": "Mapping of files, to be copied before install, to destination name relative to installDir"}, {"type": "java.util.Map", "name": "files.preinstall", "reconfigurable": false, "description": "Mapping of files, to be copied before install, to destination name relative to installDir"}, {"type": "java.util.Map", "name": "files.runtime", "reconfigurable": false, "description": "Mapping of files, to be copied before customisation, to destination name relative to runDir"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "inboundPorts.autoInfer", "reconfigurable": false, "description": "If set to false turns off the opening of ports based on naming convention, and also those that are of type PortRange in Java entities"}, {"defaultValue": ".*\\.port", "type": "java.lang.String", "name": "inboundPorts.configRegex", "reconfigurable": false, "description": "Regex governing the opening of ports based on config names"}, {"defaultValue": "${config['onbox.base.dir']!config['brooklyn.datadir']!'/<ERROR>-ONBOX_BASE_DIR-not-set'}/installs/${(config['install.unique_label']??)?string(config['install.unique_label']!'X',(entity.entityType.simpleName)+((config['install.version']??)?string('_'+(config['install.version']!'X'),'')))}", "type": "java.lang.String", "name": "install.dir", "reconfigurable": false, "description": "Directory for this software to be installed in"}, {"type": "java.lang.Boolean", "name": "install.latch", "reconfigurable": false, "description": "Latch for blocking install until ready"}, {"type": "java.lang.Boolean", "name": "install.skip", "reconfigurable": false, "description": "Skip the driver install commands entirely, for pre-installed software"}, {"type": "java.lang.String", "name": "install.unique_label", "reconfigurable": false, "description": "Provides a label which uniquely identifies an installation, used in the computation of the install dir; this should include something readable, and must include a hash of all data which differentiates an installation (e.g. version, plugins, etc), but should be the same where install dirs can be shared to allow for re-use"}, {"defaultValue": "1.2.16", "type": "java.lang.String", "name": "install.version", "reconfigurable": false, "description": "Suggested version"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "java.check.hostname.bug", "reconfigurable": false, "description": "Check whether hostname is too long and will likely crash Javadue to bug 7089443"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "java.metrics.mxbeanStatsEnabled", "reconfigurable": false, "description": "Enables collection of JVM stats from the MXBeans, such as memory and thread usage (default is true)"}, {"defaultValue": [], "type": "java.util.Set", "name": "java.opts", "reconfigurable": false, "description": "Java command line options"}, {"defaultValue": {}, "type": "java.util.Map", "name": "java.sysprops", "reconfigurable": false, "description": "Java command line system properties"}, {"defaultValue": "1.7", "type": "java.lang.String", "name": "java.version.required", "reconfigurable": false, "description": "Java version required"}, {"type": "java.lang.String", "name": "jmx.agent.local.path", "reconfigurable": false, "description": "Path to JMX driver on the local machine"}, {"name": "jmx.agent.mode", "defaultValue": "JMXMP_AND_RMI", "reconfigurable": false, "possibleValues": [{"description": "AUTODETECT", "value": "AUTODETECT"}, {"description": "JMXMP", "value": "JMXMP"}, {"description": "JMXMP_AND_RMI", "value": "JMXMP_AND_RMI"}, {"description": "JMX_RMI_CUSTOM_AGENT", "value": "JMX_RMI_CUSTOM_AGENT"}, {"description": "JMX_RMI", "value": "JMX_RMI"}, {"description": "NONE", "value": "NONE"}], "type": "java.lang.Enum", "description": "What type of JMX agent to use; defaults to null (autodetect) which means JMXMP_AND_RMI allowing firewall access through a single port as well as local access supporting jconsole (unless JMX_SSL_ENABLED is set, in which case it is JMXMP only)"}, {"defaultValue": "jmxrmi", "type": "java.lang.String", "name": "jmx.context", "reconfigurable": false, "description": "JMX context path"}, {"defaultValue": "31001-65535", "type": "org.apache.brooklyn.api.location.PortRange", "name": "jmx.direct.port", "reconfigurable": false, "description": "JMX direct/private port (e.g. JMX RMI server port, or JMXMP port, but not RMI registry port)"}, {"type": "org.apache.brooklyn.api.location.PortRange", "name": "jmx.direct.port.legacy.NOT_USED", "reconfigurable": false, "description": "Legacy definition JMX direct/private port (e.g. JMX RMI server port, or JMXMP port, but not RMI registry port)"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "jmx.enabled", "reconfigurable": false, "description": "JMX enabled"}, {"type": "java.lang.String", "name": "jmx.password", "reconfigurable": false, "description": "JMX password"}, {"type": "java.security.cert.Certificate", "name": "jmx.ssl.access.cert", "reconfigurable": false, "description": "certificate of key used to access a JMX agent"}, {"type": "java.security.PrivateKey", "name": "jmx.ssl.access.key", "reconfigurable": false, "description": "key used to access a JMX agent (typically per entity, embedded in the managed JVM)"}, {"defaultValue": false, "type": "java.lang.Boolean", "name": "jmx.ssl.enabled", "reconfigurable": false, "description": "JMX over JMXMP enabled with SSL/TLS"}, {"type": "java.lang.String", "name": "jmx.user", "reconfigurable": false, "description": "JMX username"}, {"type": "java.lang.Boolean", "name": "launch.latch", "reconfigurable": false, "description": "Latch for blocking launch until ready"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "metrics.usage.retrieve", "reconfigurable": false, "description": "Whether to retrieve the usage (e.g. performance) metrics"}, {"defaultValue": false, "type": "java.lang.Boolean", "name": "openIptables", "reconfigurable": false, "description": "Whether to open the INBOUND_PORTS via iptables rules; if true then ssh in to run iptables commands, as part of machine provisioning"}, {"type": "java.lang.String", "name": "post.customize.command", "reconfigurable": false, "description": "Command to be run after the customize method being called on the driver"}, {"type": "java.lang.String", "name": "post.install.command", "reconfigurable": false, "description": "Command to be run after the install method being called on the driver"}, {"type": "java.lang.String", "name": "post.launch.command", "reconfigurable": false, "description": "Command to be run after the launch method being called on the driver"}, {"type": "java.lang.String", "name": "pre.customize.command", "reconfigurable": false, "description": "Command to be run prior to the customize method being called on the driver"}, {"type": "java.lang.String", "name": "pre.install.command", "reconfigurable": false, "description": "Command to be run prior to the install method being called on the driver"}, {"type": "java.lang.String", "name": "pre.launch.command", "reconfigurable": false, "description": "Command to be run prior to the launch method being called on the driver"}, {"defaultValue": {}, "type": "java.util.Map", "name": "provisioning.properties", "reconfigurable": false, "description": "Custom properties to be passed in when provisioning a new machine"}, {"defaultValue": [22], "type": "java.util.Collection", "name": "requiredOpenLoginPorts", "reconfigurable": false, "description": "The port(s) to be opened, to allow login"}, {"type": "java.lang.Boolean", "name": "resources.install.latch", "reconfigurable": false, "description": "Latch for blocking install resources until ready"}, {"type": "java.lang.Boolean", "name": "resources.runtime.latch", "reconfigurable": false, "description": "Latch for blocking runtime resources until ready"}, {"defaultValue": "7199", "type": "org.apache.brooklyn.api.location.PortRange", "name": "rmi.registry.port", "reconfigurable": false, "description": "RMI registry port, used for discovering JMX (private) port"}, {"defaultValue": "${config['onbox.base.dir']!config['brooklyn.datadir']!'/<ERROR>-ONBOX_BASE_DIR-not-set'}/apps/${entity.applicationId}/entities/${entity.entityType.simpleName}_${entity.id}", "type": "java.lang.String", "name": "run.dir", "reconfigurable": false, "description": "Directory for this software to be run from"}, {"type": "java.lang.Boolean", "name": "setup.latch", "reconfigurable": false, "description": "Latch for blocking setup until ready"}, {"defaultValue": {}, "type": "java.util.Map", "name": "shell.env", "reconfigurable": false, "description": "Map of environment variables to pass to the runtime shell"}, {"defaultValue": "org.apache.brooklyn.entity.software.base.SoftwareProcessDriverLifecycleEffectorTasks@5d59d69c", "type": "org.apache.brooklyn.entity.software.base.SoftwareProcessDriverLifecycleEffectorTasks", "name": "softwareProcess.lifecycleTasks", "reconfigurable": false, "description": "An object that handles lifecycle of an entity's associated machine."}, {"defaultValue": "10s", "type": "org.apache.brooklyn.util.time.Duration", "name": "softwareProcess.maxSensorRebindDelay", "reconfigurable": false, "description": "The maximum delay to apply when reconnecting sensors when rebinding to this entity. Brooklyn will wait a random amount of time, up to the value of this config key, to avoid a thundering herd problem when the entity shares its machine with several others. Set to null or to 0 to disable any delay."}, {"type": "java.lang.Boolean", "name": "start.latch", "reconfigurable": false, "description": "Latch for blocking start until ready"}, {"defaultValue": "5m", "type": "org.apache.brooklyn.util.time.Duration", "name": "start.timeout", "reconfigurable": false, "description": "Time to wait for process and for SERVICE_UP before failing (in seconds, default 2m)"}, {"defaultValue": false, "type": "java.lang.Boolean", "name": "stopIptables", "reconfigurable": false, "description": "Whether to stop iptables entirely; if true then ssh in to stop the iptables service, as part of machine provisioning"}, {"type": "java.util.Map", "name": "templates.install", "reconfigurable": false, "description": "Mapping of templates, to be filled in and copied before install, to destination name relative to installDir"}, {"type": "java.util.Map", "name": "templates.preinstall", "reconfigurable": false, "description": "Mapping of templates, to be filled in and copied before pre-install, to destination name relative to installDir"}, {"type": "java.util.Map", "name": "templates.runtime", "reconfigurable": false, "description": "Mapping of templates, to be filled in and copied before customisation, to destination name relative to runDir"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "thriftMonitoring.enabled", "reconfigurable": false, "description": "Thrift-port monitoring enabled"}], "description": "Cassandra is a highly scalable, eventually consistent, distributed, structured key-value store which provides a ColumnFamily-based data model richer than typical key/value systems"}]}